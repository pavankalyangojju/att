import cv2
import pickle
import numpy as np
import os
import csv
import time
from datetime import datetime
import pyttsx3
import RPi.GPIO as GPIO
import requests
from sklearn.neighbors import KNeighborsClassifier

# --- Telegram Config ---
BOT_TOKEN = "8129064480:AAFZZjw7UTUrPgwUW33xu_B51MyJPg3WneY"
CHAT_ID = "1367693706"

# GPIO Setup
GPIO.setmode(GPIO.BCM)
BUZZER_PIN = 17
LED_WRONG_PIN = 27
LED_ATTENDANCE_PIN = 22

GPIO.setup(BUZZER_PIN, GPIO.OUT)
GPIO.setup(LED_WRONG_PIN, GPIO.OUT)
GPIO.setup(LED_ATTENDANCE_PIN, GPIO.OUT)

GPIO.output(BUZZER_PIN, GPIO.LOW)
GPIO.output(LED_WRONG_PIN, GPIO.LOW)
GPIO.output(LED_ATTENDANCE_PIN, GPIO.LOW)

# TTS
engine = pyttsx3.init()

def speak(text):
    engine.say(text)
    engine.runAndWait()

def send_attendance_api(name, date, timestamp):
    try:
        requests.post("http://localhost:5000/attendance", json={"name": name, "date": date, "time": timestamp})
    except Exception as e:
        print("API Error:", e)

def send_telegram_photo(image_path, caption=""):
    try:
        with open(image_path, 'rb') as photo:
            files = {'photo': photo}
            data = {'chat_id': CHAT_ID, 'caption': caption}
            requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto", files=files, data=data)
    except Exception as e:
        print("Telegram Error:", e)

# Load Face Data
video = cv2.VideoCapture(0)
if not video.isOpened():
    print("Error: Camera not found.")
    exit()

faceCascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

try:
    while True:
        ret, img = video.read()
        img = cv2.flip(img, -1)  # Flip vertically

        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        faces = faceCascade.detectMultiScale(
            gray,
            scaleFactor=1.2,
            minNeighbors=5,
            minSize=(100, 100),
        )

        for (x, y, w, h) in faces:
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)

            # Dummy recognizer logic (replace with actual recognizer)
            recognized_name = "Person"
            confidence = 30  # Dummy confidence

            if confidence < 45:
                id = recognized_name
                conf_text = "  {0}%".format(round(100 - confidence))
            else:
                id = "unknown"
                conf_text = "  {0}%".format(round(100 - confidence))

            cv2.putText(img, str(id), (x + 5, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            cv2.putText(img, str(conf_text), (x + 5, y + h - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 1)

            date_today = datetime.now().strftime("%d-%m-%Y")
            attendance_file = f"Attendance/Attendance_{date_today}.csv"
            os.makedirs("Attendance/images", exist_ok=True)

            timestamp = datetime.now().strftime("%H:%M:%S")
            file_exists = os.path.isfile(attendance_file)

            with open(attendance_file, "a", newline='') as csvfile:
                writer = csv.writer(csvfile)
                if not file_exists:
                    writer.writerow(["NAME", "DATE", "TIME"])
                writer.writerow([recognized_name, date_today, timestamp])

            photo_filename = f"Attendance/images/{recognized_name}_{datetime.now().strftime('%H%M%S')}.jpg"
            cv2.imwrite(photo_filename, img)

            send_telegram_photo(photo_filename, caption=f"Attendance Marked\nName: {recognized_name}\nDate: {date_today}\nTime: {timestamp}")
            send_attendance_api(recognized_name, date_today, timestamp)

            speak("Attendance Taken")

            GPIO.output(LED_ATTENDANCE_PIN, GPIO.HIGH)
            GPIO.output(BUZZER_PIN, GPIO.HIGH)
            time.sleep(1)
            GPIO.output(BUZZER_PIN, GPIO.LOW)
            time.sleep(10)
            GPIO.output(LED_ATTENDANCE_PIN, GPIO.LOW)

        cv2.imshow("Camera", img)
        if cv2.waitKey(10) & 0xFF == 27:
            break

except KeyboardInterrupt:
    print("Interrupted by user.")

finally:
    if 'video' in locals():
        video.release()
    cv2.destroyAllWindows()
    GPIO.cleanup()
