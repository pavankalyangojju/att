import cv2
import pickle
import numpy as np
import os
import csv
import time
from datetime import datetime
import pyttsx3
import RPi.GPIO as GPIO
import smbus2  
import requests  
from mfrc522 import SimpleMFRC522  
from sklearn.neighbors import KNeighborsClassifier
from skimage.metrics import structural_similarity as ssim  

# Disable GPIO Warnings
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
BUZZER_PIN = 17  
GPIO.setup(BUZZER_PIN, GPIO.OUT)
GPIO.output(BUZZER_PIN, GPIO.LOW)

# Initialize pyttsx3 engine for text-to-speech
engine = pyttsx3.init()

# Initialize RFID Reader
reader = SimpleMFRC522()

# LCD I2C Setup
LCD_ADDRESS = 0x27  
bus = smbus2.SMBus(1)  

# Ensure Data Directory Exists
if not os.path.exists("data"):
    os.makedirs("data")

# File paths
faces_file = 'data/faces_data.pkl'
names_file = 'data/names.pkl'
rfid_file = 'data/rfid_data.pkl'

# Load Data
try:
    with open(names_file, 'rb') as w:
        LABELS = pickle.load(w)
    with open(faces_file, 'rb') as f:
        FACES = pickle.load(f)
    with open(rfid_file, 'rb') as r:
        RFID_LIST = pickle.load(r)
except FileNotFoundError:
    print("No previous data found. Starting fresh.")
    LABELS = []
    FACES = np.empty((0, 50, 50, 3), dtype=np.uint8)
    RFID_LIST = []

# Ensure `LABELS` has the same length as `FACES`
if len(LABELS) != len(FACES):
    print(f"Warning: Mismatch in data size. Faces: {len(FACES)}, Labels: {len(LABELS)}")
    if len(LABELS) < len(FACES):
        LABELS.extend(["Unknown"] * (len(FACES) - len(LABELS)))  # Fill missing labels
    else:
        LABELS = LABELS[:len(FACES)]  # Trim to match FACES length

# Convert `FACES` into a valid shape for KNN
if len(FACES) > 0:
    FACES = FACES.reshape(FACES.shape[0], -1)  

# Train KNN only if data is available
if len(FACES) > 0 and len(LABELS) > 0:
    knn = KNeighborsClassifier(n_neighbors=5)
    knn.fit(FACES, LABELS)
else:
    print("No face data available. Cannot train KNN.")
    knn = None

attended = set()

# Fake Face Detection Using Laplacian Variance
def detect_fake_face(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    laplacian = cv2.Laplacian(gray, cv2.CV_64F).var()
    return laplacian < 50  # If variance is low, it's likely a photo

# Main Loop
video = cv2.VideoCapture(0)
if not video.isOpened():
    print("Error: Could not open camera.")
    exit()

while True:
    ret, frame = video.read()
    if not ret:
        print("Error capturing frame.")
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    facedetect = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    faces = facedetect.detectMultiScale(gray, 1.3, 5)

    for (x, y, w, h) in faces:
        crop_img = frame[y:y+h, x:x+w]
        if crop_img.size == 0:
            continue

        if detect_fake_face(crop_img):
            print("Fake Face Detected!")
            continue

        resized_img = cv2.resize(crop_img, (50, 50)).flatten().reshape(1, -1)

        # Check if KNN is trained before predicting
        if knn is not None:
            try:
                recognized_name = knn.predict(resized_img)[0]
                print("Recognized:", recognized_name)
            except Exception as e:
                print("KNN Prediction Error:", e)
                continue
        else:
            print("KNN Model Not Trained!")
            continue

        print("Put your RFID Card...")

        try:
            card_id, _ = reader.read()
            print(f"RFID Card Detected: {card_id}")
        except Exception as e:
            print(f"RFID Error: {e}")
            continue

        if recognized_name not in attended and str(card_id).strip() in [str(rfid).strip() for rfid in RFID_LIST]:
            ts = time.time()
            date = datetime.fromtimestamp(ts).strftime("%d-%m-%Y")
            timestamp = datetime.fromtimestamp(ts).strftime("%H:%M:%S")
            attendance_file = f"Attendance/Attendance_{date}.csv"

            file_exists = os.path.isfile(attendance_file)
            with open(attendance_file, "a", newline='') as csvfile:
                writer = csv.writer(csvfile)
                if not file_exists:
                    writer.writerow(["NAME", "RFID", "DATE", "TIME"])
                writer.writerow([recognized_name, card_id, date, timestamp])

            attended.add(recognized_name)
            print(f"Attendance Taken for {recognized_name}")

            # Buzzer Alert
            GPIO.output(BUZZER_PIN, GPIO.HIGH)
            time.sleep(1)
            GPIO.output(BUZZER_PIN, GPIO.LOW)

        else:
            print("Unauthorized Access! Try Again.")

    cv2.imshow("Frame", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

video.release()
cv2.destroyAllWindows()
GPIO.cleanup()

print("Process completed.")
